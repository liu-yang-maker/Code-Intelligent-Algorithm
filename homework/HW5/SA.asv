%%%%%%%%%%%%%%%%%%%%%%模拟退火算法解决TSP问题%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%初始化%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
clear;                      %清除所有变量
close all;                      %清图
clc;                            %清屏
%C = [41 94;37 84;54 67;25 62; 7 64;2 99;68 58;71 44; 54 62;83 69;64 60;18 54; 22 60;83 46;91 38;25 38; 24 42;58 69;71 71;74 78; 87 76;18 40;13 40;82 7; 62 32; 58 35;45 21;41 26; 44 35; 4 50];
%C=[1304 2312;3639 1315;4177 2244;3712 1399;3488 1535;3326 1556;...
%    3238 1229;4196 1044;4312  790;4386  570;3007 1970;2562 1756;...
%    2788 1491;2381 1676;1332  695;3715 1678;3918 2179;4061 2370;...
%    3780 2212;3676 2578;4029 2838;4263 2931;3429 1908;3507 2376;...
%    3394 2643;3439 3201;2935 3240;3140 3550;2545 2357;2778 2826;...
%    2370 2975];                 %31个省会城市坐标

C = [6734 1453;
 2233 10;
3 5530 1424;
4 401 841;
5 3082 1644;
6 7608 4458;
7 7573 3716;
8 7265 1268;
9 6898 1885;
10 1112 2049;
11 
5468 2606;
12 5989 2873;
13 4706 2674;
14 4612 2035;
15 6347 2683;
16 6107 669;
17 7611 5184;
18 7462 3590;
19 7732 4723;
20 5900 3561;
21 
4483 3369;
22 6101 1110;
23 5199 2182;
24 1633 2809;
25 4307 2322;
26 675 1006;
27 7555 4819;
28 7541 3981;
29 3177 756;
30 7352 4506;
31 
7545 2801;
32 3245 3305;
33 6426 3173;
34 4608 1198;
35 23 2216;
36 7248 3779;
37 7762 4595;
38 7392 2244;
39 3484 2829;
 6271 2135; 
4985 140;
 1916 1569;
 7280 4899;
 7509 3239;
 10 2676;
 6807 2993;
 5185 3258;
 3023 1942];



n=size(C,1);                     %TSP问题的规模,即城市数目
T=100*n;                         %初始温度
L=100;                           %马可夫链长度
K=0.9;                          %衰减参数
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%城市坐标结构体%%%%%%%%%%%%%%%%%%%%%%%%%%
city=struct([]);
for i=1:n
    city(i).x=C(i,1);
    city(i).y=C(i,2);
end
l=1;                             %统计迭代次数
len(l)=func3(city,n);            %每次迭代后的路线长度
figure(1); 
while T>0.001                    %停止迭代温度
    %%%%%%%%%%%%%%%%多次迭代扰动，温度降低之前多次实验%%%%%%%%%%%%%%%
    for i=1:L            
        %%%%%%%%%%%%%%%%%%%计算原路线总距离%%%%%%%%%%%%%%%%%%%%%%%%%
        len1=func3(city,n);         
        %%%%%%%%%%%%%%%%%%%%%%%%%产生随机扰动%%%%%%%%%%%%%%%%%%%%%%%
        %%%%%%%%%%%%%%%%随机置换两个不同的城市的坐标%%%%%%%%%%%%%%%%%
        p1=floor(1+n*rand());
        p2=floor(1+n*rand());
        while p1==p2
            p1=floor(1+n*rand());
            p2=floor(1+n*rand());
        end
        tmp_city=city;
        tmp=tmp_city(p1);
        tmp_city(p1)=tmp_city(p2);
        tmp_city(p2)=tmp;
        %%%%%%%%%%%%%%%%%%%%%%%%计算新路线总距离%%%%%%%%%%%%%%%%%%%%
        len2=func3(tmp_city,n);     
        %%%%%%%%%%%%%%%%%%新老距离的差值，相当于能量%%%%%%%%%%%%%%%%%
        delta_e=len2-len1;
        %%%%%%%%%%%%新路线好于旧路线，用新路线代替旧路线%%%%%%%%%%%%%%  
        if delta_e<0        
            city=tmp_city;
        else
            %%%%%%%%%%%%%%%%%%以概率选择是否接受新解%%%%%%%%%%%%%%%%%
            if exp(-delta_e/T)>rand()
                city=tmp_city;      %一个city就是一个解，且代表了当前最优解
            end
        end
    end
    l=l+1;
    %%%%%%%%%%%%%%%%%%%%%%%%%计算新路线距离%%%%%%%%%%%%%%%%%%%%%%%%%%
    len(l)=func3(city,n); 
    %%%%%%%%%%%%%%%%%%%%%%%%%%%温度不断下降%%%%%%%%%%%%%%%%%%%%%%%%%%
    T=T*K;   
    for i=1:n-1
        plot([city(i).x,city(i+1).x],[city(i).y,city(i+1).y],'bo-');
        hold on;
    end
    plot([city(n).x,city(1).x],[city(n).y,city(1).y],'ro-');
    title(['优化最短距离:',num2str(len(l))]);
    hold off;
    pause(0.005);
end
figure(2);
plot(len)
xlabel('迭代次数')
ylabel('目标函数值')
title('适应度进化曲线')